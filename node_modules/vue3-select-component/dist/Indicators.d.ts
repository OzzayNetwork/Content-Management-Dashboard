import { Option } from './types/option';
import { IndicatorsSlots } from './types/slots';
declare const _default: <GenericOption extends Option<OptionValue>, OptionValue = string>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly onClear?: (() => any) | undefined;
        readonly onToggle?: (() => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, never>, "onClear" | "onToggle"> & {
        hasSelectedOption: boolean;
        isMenuOpen: boolean;
        isClearable: boolean;
        isLoading: boolean;
        isDisabled: boolean;
        slots: IndicatorsSlots<GenericOption, OptionValue>;
    } & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{
        containerRef: Readonly<import('vue').ShallowRef<HTMLDivElement | null>>;
        clearButtonRef: Readonly<import('vue').ShallowRef<HTMLButtonElement | null>>;
        dropdownButtonRef: Readonly<import('vue').ShallowRef<HTMLButtonElement | null>>;
    }>): void;
    attrs: any;
    slots: {};
    emit: {
        (e: "clear"): void;
        (e: "toggle"): void;
    };
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
